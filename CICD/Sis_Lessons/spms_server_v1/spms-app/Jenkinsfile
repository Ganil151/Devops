pipeline {
    agent { label params.NODE_LABEL }

    environment {
        COMPOSE_PROJECT_NAME = "spring-petclinic"
    }

    parameters {
        string(
            name: 'NODE_LABEL',
            defaultValue: 'worker-node-1',
            description: 'Label of the Jenkins worker node to run this pipeline'
        )
    }

    triggers {
        // Trigger builds via GitHub webhook
        githubPush()
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                    credentialsId: 'github-credentials',
                    url: 'https://github.com/Ganil151/spring-petclinic-microservices.git'
            }
        }

        stage('Install yq') {
            steps {
                script {
                    sh '''
                    if ! command -v yq &> /dev/null; then
                        echo "Installing yq..."
                        sudo wget https://github.com/mikefarah/yq/releases/download/v4.34.1/yq_linux_amd64 -O /usr/local/bin/yq
                        sudo chmod +x /usr/local/bin/yq
                    fi
                    '''
                }
            }
        }

        stage('Remove genai-service from docker-compose.yml') {
            steps {
                script {
                    sh '''
                    cp docker-compose.yml docker-compose.yml.bak
                    yq eval 'del(.services.genai-service)' -i docker-compose.yml
                    '''
                }
            }
        }

        stage('Build Application') {
            steps {
                script {
                    sh '''
                    echo "Building the Spring PetClinic application..."
                    ./mvnw clean package -DskipTests
                    '''
                }
            }
        }

        stage('Run Unit Tests') {
            steps {
                script {
                    sh '''
                    echo "Running unit tests..."
                    ./mvnw test
                    '''
                }
            }
        }

    }

    post {
        success {
            echo "Build successful!"
        }
        failure {
            echo "Build failed!"
        }
        always {
            cleanWs() // Clean up workspace after the build
        }
    }
}